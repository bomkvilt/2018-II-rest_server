package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdc\x36\x13\x3e\x8b\xbf\x62\x22\x04\x89\x64\x6c\xa4\xf7\xec\x17\x3e\xb8\x4e\x93\xb8\x68\x9c\x45\xd6\x45\x0f\x45\x0f\xb2\x34\x2b\xab\x96\x48\x85\xa4\x6a\x1b\x2c\xff\x7b\x31\x24\xf5\xb1\x1f\xae\x53\xa3\x3a\x2c\x56\xe2\xf0\x99\xaf\xe7\x19\x32\xcf\xe1\x42\x54\x08\x35\x72\x94\x85\xc6\xca\xff\xc2\xcd\x23\xdc\x17\xed\x6d\xd1\xb6\xc5\xff\xe1\xbd\xe0\x6f\x35\x60\xd5\xe8\x57\xac\x2f\xca\xbb\xa2\x46\x90\xa8\x74\xd1\x37\x8c\x19\xf3\x7a\x2d\xc5\x1f\x58\x6a\xa0\xe7\xf4\x0c\xb2\xc5\xbb\xb5\x64\x70\xde\xf7\x6d\x53\x16\xba\x11\xdc\x19\x2c\xde\xad\x65\xac\xe9\x7a\x21\x35\x24\x2c\x5a\x3e\xf1\x8c\x6c\x6d\x3e\xe8\xa6\x45\x95\x8f\x41\xc5\x8c\xd0\x27\xdb\x52\x54\xe8\x77\xec\x40\xc7\x87\x88\x3b\xeb\xf9\x94\x76\x1e\xf2\xc9\x45\x4f\x1f\x1a\xc1\x95\x77\x61\x8c\x2c\x78\x8d\x90\x6d\x86\x9b\xb2\xd0\x58\x0b\xd9\xa0\xb2\xf6\x25\x88\xb9\x31\x99\xb5\x31\x44\x2c\x32\x06\x79\x65\xed\x0c\x7f\xd9\xf5\xed\x9e\x0b\xa0\xac\xdc\x96\x23\x7e\x02\xd4\x84\xc4\x22\x16\xc5\xa5\x7c\xec\xb5\xc8\x75\xab\x62\x16\xc5\x1c\x75\x7e\xab\x75\x1f\x33\xb2\x6a\xb6\x90\xfd\xf0\xb9\xa9\xaa\x16\xef\x0b\xe9\xf0\x59\x14\xc5\xdb\x4e\x2f\x51\x58\x14\xd7\x8d\xbe\x1d\x6e\xb2\x52\x74\x79\x2d\xde\x89\x1e\x39\x65\x81\x52\x0a\xe9\x60\x8f\xaf\xcb\x81\xeb\xa6\xc3\x67\x0d\xf2\x6e\x0a\x21\x66\x29\x63\x8c\x6d\x07\x5e\x42\x29\xf8\xb6\xa9\x07\x89\x1b\x94\x7f\xa2\x4c\x14\x9c\x50\xe8\x99\x7f\x5d\x81\x2a\x6f\xb1\xc3\x15\x14\x55\x25\x41\x69\xd9\xf0\x3a\x05\x63\xf7\x36\x7f\x68\x8b\x5a\x25\x45\xdf\xc0\xc9\x5c\xf5\xcc\x98\xec\x7c\x7d\x69\xed\x91\x0d\xd7\x3f\x6f\x12\xdd\xaa\x0b\xf7\x0e\x27\xba\x55\x99\xff\xef\x6c\x0f\x82\x3b\x5f\x5f\xfe\x03\xba\x0b\xf8\x53\xc1\xab\x16\x25\x18\x16\x15\x7d\xe3\xe3\xff\x91\x6a\x07\x67\xe0\x6b\xb8\xf8\xe6\x6d\x7e\xda\x7c\xb9\xba\x10\x5c\x0d\x1d\x92\x55\x28\xd4\xce\xe7\x24\x9d\x4d\xd7\x52\x54\x43\x79\x60\x3a\x7e\x4e\xd2\xb1\xdd\x49\x8b\x1c\xb2\x2f\x53\xa8\x29\xd4\x1a\xfe\x47\x54\x89\x4a\xfd\x40\x42\x1c\xd5\x44\x49\x6b\x7c\xd0\xc6\xad\x89\x0a\xb3\x0d\xea\xa1\x0f\x5f\x93\x37\xa5\x7e\x48\x17\x1c\xd9\xd1\xc5\x8c\x6f\x2d\x40\x20\x1a\xb1\x19\x3b\xe4\x1a\x89\xe4\x14\xb9\x31\x63\x69\xac\x85\x33\x30\x66\x21\xa8\x47\x6b\x69\xfd\xc3\xc0\x4b\xcf\xee\x04\x6e\xbd\xad\x31\x33\xfe\xe5\x7b\x6b\x13\x8a\x04\xd2\x51\xd6\xc6\x60\xab\x10\xe6\xe7\x45\xce\xa8\xc7\x49\x5f\xc8\xa2\x3b\x6a\xb9\xa6\x15\xd4\x92\x5a\x3c\x93\x37\xfb\x8a\xaa\x17\xbc\xf2\xad\x0e\x8f\x44\x3d\x48\xbe\xb4\xba\x12\x7a\x51\x8b\x24\x1e\xe9\xf1\x76\x3f\xb3\xb7\xd0\x28\x9a\xb2\xcd\x6c\x1d\x4f\x79\xda\x74\xf4\xb0\x9c\x1c\x93\xee\x83\x5b\x45\x3d\xfb\xd8\x8a\x9b\xa2\x9d\x75\x9e\x4c\x2c\x4c\xdc\xfa\x62\x02\xa4\x2b\x70\x8d\x75\x44\xd7\x8f\x3d\x42\xbd\xb7\x79\x8c\x56\x69\x39\x94\x9a\x12\xdd\x86\xb2\x81\x2b\x9a\xbc\xf7\xa4\xf7\xb5\x50\xf8\xab\x6c\x34\xa9\x55\x06\xf5\x7e\xc5\x6f\x03\x2a\xed\x5c\x38\x25\x25\x35\x9c\x3c\xe1\x24\x75\x41\x7e\xba\xbe\x5e\x7f\x37\x2c\x05\x54\x67\x63\x48\x89\xbc\x5f\x81\x9c\x7d\x1d\x2f\x47\x20\xd6\x8e\x58\x5d\x1d\x0e\xc4\xb0\x2f\x68\xd8\x91\xd5\x3e\xf0\x52\x5d\x1c\x1f\x34\xc9\x2b\xf8\xca\xa6\xcc\x18\x23\xce\x06\xe1\x1c\x20\xf8\x89\xec\xd8\x54\x23\x5f\x81\xb8\x23\x10\x27\xc7\xd9\xea\xa3\x3f\x5f\x84\x54\x7e\xff\x6f\xb1\x3f\x09\x7e\xa7\x6d\xcd\x16\x5e\x89\xbb\x40\xc8\xbe\xe0\x4d\x99\x6c\x3b\x9d\xb9\x59\xb3\x4d\xe2\x5f\x38\x3e\xf4\x58\xd2\xf9\x3e\x53\xf4\x14\x3c\x40\xea\xd8\x46\x27\x40\x48\xe0\x8c\x2e\x05\x09\xfd\x5d\x41\x98\x00\xd1\x4c\x3b\x36\xb1\xfd\xcd\x13\x0d\x75\x51\x8c\xcd\x39\x05\x07\x44\x10\x2c\xc8\xd6\x95\x2a\x60\x8c\x5d\x99\x87\xcc\x4e\x17\x17\x45\x3a\xda\xc0\xc3\xd9\xbb\x8b\x4b\x68\x79\x0e\xef\xf6\x9e\xbf\x20\xec\x50\x74\x8d\x09\x6d\xa1\xc1\xb0\x41\xad\x1b\x5e\x2b\x1b\xce\x8b\x79\x1a\x5d\x15\x1d\x5a\x0b\xc9\x51\xc6\x40\xfa\xcc\xa8\xa1\xc8\x8c\x79\xbd\xb0\x70\xd7\xa1\x9d\x1d\xce\x62\x1d\x6e\x59\xd3\x8d\x6a\x7e\x77\xb5\x77\xd3\x6a\xad\x25\x2d\x72\xbc\x4f\x9e\x99\x5b\x6c\xa2\xa4\x93\xed\x9e\x8a\x9e\x1c\x6a\x8e\xee\xf8\x0d\xb2\xcf\xa2\xc2\x16\xe2\xd8\x5a\x08\x85\xf5\x57\x93\x31\x4e\xef\xd0\xd7\x26\x39\x19\x83\xf3\xb4\x71\xd3\xfa\xd8\xa0\xfe\xd7\x48\xab\xa3\xb6\x2e\x36\x6b\xfd\x21\x35\x3a\xf3\x93\xd1\xba\x93\x30\xf4\x75\x5f\x68\x94\xe0\xf7\xc8\x6c\x29\xb0\xa5\xbe\x5e\x22\x2f\x27\x9b\xa7\xc4\xb5\xd4\x56\xa8\xcd\x7f\x71\x32\x4d\x45\x84\x33\x70\x7f\x67\xd5\x91\x7b\x0f\x9f\xd1\x74\x9a\xa6\x75\x44\xf2\x1b\x83\xf9\x3b\x00\x00\xff\xff\x4e\x94\x1a\xfd\x22\x0c\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates/main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
	}},
}}
