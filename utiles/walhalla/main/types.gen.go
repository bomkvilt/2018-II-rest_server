// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain(in *jlexer.Lexer, out *statistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Project":
			out.Project = string(in.String())
		case "Application":
			out.Application = string(in.String())
		case "API":
			out.API = string(in.String())
		case "Operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]operation, 0, 1)
					} else {
						out.Operations = []operation{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 operation
					easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain1(in, &v1)
					out.Operations = append(out.Operations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Subcategories":
			if in.IsNull() {
				in.Skip()
				out.Subcategories = nil
			} else {
				in.Delim('[')
				if out.Subcategories == nil {
					if !in.IsDelim(']') {
						out.Subcategories = make([]string, 0, 4)
					} else {
						out.Subcategories = []string{}
					}
				} else {
					out.Subcategories = (out.Subcategories)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Subcategories = append(out.Subcategories, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ImplSubcategories":
			if in.IsNull() {
				in.Skip()
				out.ImplSubcategories = nil
			} else {
				in.Delim('[')
				if out.ImplSubcategories == nil {
					if !in.IsDelim(']') {
						out.ImplSubcategories = make([]string, 0, 4)
					} else {
						out.ImplSubcategories = []string{}
					}
				} else {
					out.ImplSubcategories = (out.ImplSubcategories)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.ImplSubcategories = append(out.ImplSubcategories, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "FuncSettings":
			if in.IsNull() {
				in.Skip()
				out.FuncSettings = nil
			} else {
				in.Delim('[')
				if out.FuncSettings == nil {
					if !in.IsDelim(']') {
						out.FuncSettings = make([]funcSettings, 0, 1)
					} else {
						out.FuncSettings = []funcSettings{}
					}
				} else {
					out.FuncSettings = (out.FuncSettings)[:0]
				}
				for !in.IsDelim(']') {
					var v4 funcSettings
					(v4).UnmarshalEasyJSON(in)
					out.FuncSettings = append(out.FuncSettings, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GlobalMiddlewares":
			if in.IsNull() {
				in.Skip()
				out.GlobalMiddlewares = nil
			} else {
				in.Delim('[')
				if out.GlobalMiddlewares == nil {
					if !in.IsDelim(']') {
						out.GlobalMiddlewares = make([]string, 0, 4)
					} else {
						out.GlobalMiddlewares = []string{}
					}
				} else {
					out.GlobalMiddlewares = (out.GlobalMiddlewares)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.GlobalMiddlewares = append(out.GlobalMiddlewares, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BMiddlewares":
			out.BMiddlewares = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain(out *jwriter.Writer, in statistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Project\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Project))
	}
	{
		const prefix string = ",\"Application\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Application))
	}
	{
		const prefix string = ",\"API\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.API))
	}
	{
		const prefix string = ",\"Operations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Operations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Operations {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain1(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Subcategories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Subcategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Subcategories {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ImplSubcategories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ImplSubcategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.ImplSubcategories {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"FuncSettings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FuncSettings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.FuncSettings {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GlobalMiddlewares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GlobalMiddlewares == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.GlobalMiddlewares {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BMiddlewares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BMiddlewares))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v statistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v statistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *statistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *statistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain(l, v)
}
func easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain1(in *jlexer.Lexer, out *operation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Implemented":
			out.Implemented = bool(in.Bool())
		case "OperationID":
			out.OperationID = string(in.String())
		case "Subcategory":
			out.Subcategory = string(in.String())
		case "Handler":
			out.Handler = string(in.String())
		case "Function":
			out.Function = string(in.String())
		case "Parametr":
			out.Parametr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain1(out *jwriter.Writer, in operation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Implemented\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Implemented))
	}
	{
		const prefix string = ",\"OperationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperationID))
	}
	{
		const prefix string = ",\"Subcategory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subcategory))
	}
	{
		const prefix string = ",\"Handler\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Handler))
	}
	{
		const prefix string = ",\"Function\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Function))
	}
	{
		const prefix string = ",\"Parametr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parametr))
	}
	out.RawByte('}')
}
func easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain2(in *jlexer.Lexer, out *funcSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "auth":
			out.Auth = string(in.String())
		case "mdw":
			if in.IsNull() {
				in.Skip()
				out.Middlewares = nil
			} else {
				in.Delim('[')
				if out.Middlewares == nil {
					if !in.IsDelim(']') {
						out.Middlewares = make([]string, 0, 4)
					} else {
						out.Middlewares = []string{}
					}
				} else {
					out.Middlewares = (out.Middlewares)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Middlewares = append(out.Middlewares, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain2(out *jwriter.Writer, in funcSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"auth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Auth))
	}
	{
		const prefix string = ",\"mdw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Middlewares == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Middlewares {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v funcSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v funcSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *funcSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *funcSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain2(l, v)
}
func easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain3(in *jlexer.Lexer, out *appSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "globalMiddlewares":
			if in.IsNull() {
				in.Skip()
				out.GlobalMiddlewares = nil
			} else {
				in.Delim('[')
				if out.GlobalMiddlewares == nil {
					if !in.IsDelim(']') {
						out.GlobalMiddlewares = make([]string, 0, 4)
					} else {
						out.GlobalMiddlewares = []string{}
					}
				} else {
					out.GlobalMiddlewares = (out.GlobalMiddlewares)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.GlobalMiddlewares = append(out.GlobalMiddlewares, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operationMiddlewars":
			if in.IsNull() {
				in.Skip()
				out.OperationMiddlewars = nil
			} else {
				in.Delim('[')
				if out.OperationMiddlewars == nil {
					if !in.IsDelim(']') {
						out.OperationMiddlewars = make([]string, 0, 4)
					} else {
						out.OperationMiddlewars = []string{}
					}
				} else {
					out.OperationMiddlewars = (out.OperationMiddlewars)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.OperationMiddlewars = append(out.OperationMiddlewars, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain3(out *jwriter.Writer, in appSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"globalMiddlewares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GlobalMiddlewares == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.GlobalMiddlewares {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"operationMiddlewars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OperationMiddlewars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.OperationMiddlewars {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v appSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v appSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF25f8264EncodeGithubComBomkviltTechDbAppUtilesWalhallaMain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *appSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *appSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF25f8264DecodeGithubComBomkviltTechDbAppUtilesWalhallaMain3(l, v)
}
