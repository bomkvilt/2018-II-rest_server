// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"Forum/app/generated/restapi/operations/forum"
	"Forum/app/generated/restapi/operations/post"
	"Forum/app/generated/restapi/operations/service"
	"Forum/app/generated/restapi/operations/thread"
	"Forum/app/generated/restapi/operations/user"
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewForumAPI creates a new Forum instance
func NewForumAPI(spec *loads.Document) *ForumAPI {
	return &ForumAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		BinConsumer:         runtime.ByteStreamConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ServiceClearHandler: service.ClearHandlerFunc(func(params service.ClearParams) middleware.Responder {
			return middleware.NotImplemented("operation ServiceClear has not yet been implemented")
		}),
		ForumForumCreateHandler: forum.ForumCreateHandlerFunc(func(params forum.ForumCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumForumCreate has not yet been implemented")
		}),
		ForumForumGetOneHandler: forum.ForumGetOneHandlerFunc(func(params forum.ForumGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumForumGetOne has not yet been implemented")
		}),
		ThreadForumGetThreadsHandler: thread.ForumGetThreadsHandlerFunc(func(params thread.ForumGetThreadsParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadForumGetThreads has not yet been implemented")
		}),
		ForumForumGetUsersHandler: forum.ForumGetUsersHandlerFunc(func(params forum.ForumGetUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumForumGetUsers has not yet been implemented")
		}),
		PostPostGetOneHandler: post.PostGetOneHandlerFunc(func(params post.PostGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation PostPostGetOne has not yet been implemented")
		}),
		PostPostUpdateHandler: post.PostUpdateHandlerFunc(func(params post.PostUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation PostPostUpdate has not yet been implemented")
		}),
		PostPostsCreateHandler: post.PostsCreateHandlerFunc(func(params post.PostsCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation PostPostsCreate has not yet been implemented")
		}),
		ServiceStatusHandler: service.StatusHandlerFunc(func(params service.StatusParams) middleware.Responder {
			return middleware.NotImplemented("operation ServiceStatus has not yet been implemented")
		}),
		ThreadThreadCreateHandler: thread.ThreadCreateHandlerFunc(func(params thread.ThreadCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadThreadCreate has not yet been implemented")
		}),
		ThreadThreadGetOneHandler: thread.ThreadGetOneHandlerFunc(func(params thread.ThreadGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadThreadGetOne has not yet been implemented")
		}),
		PostThreadGetPostsHandler: post.ThreadGetPostsHandlerFunc(func(params post.ThreadGetPostsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostThreadGetPosts has not yet been implemented")
		}),
		ThreadThreadUpdateHandler: thread.ThreadUpdateHandlerFunc(func(params thread.ThreadUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadThreadUpdate has not yet been implemented")
		}),
		ThreadThreadVoteHandler: thread.ThreadVoteHandlerFunc(func(params thread.ThreadVoteParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadThreadVote has not yet been implemented")
		}),
		UserUserCreateHandler: user.UserCreateHandlerFunc(func(params user.UserCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserCreate has not yet been implemented")
		}),
		UserUserGetOneHandler: user.UserGetOneHandlerFunc(func(params user.UserGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserGetOne has not yet been implemented")
		}),
		UserUserUpdateHandler: user.UserUpdateHandlerFunc(func(params user.UserUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUserUpdate has not yet been implemented")
		}),
	}
}

/*ForumAPI Тестовое задание для реализации проекта "Форумы" на курсе по базам данных в
Технопарке Mail.ru (https://park.mail.ru).
*/
type ForumAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ServiceClearHandler sets the operation handler for the clear operation
	ServiceClearHandler service.ClearHandler
	// ForumForumCreateHandler sets the operation handler for the forum create operation
	ForumForumCreateHandler forum.ForumCreateHandler
	// ForumForumGetOneHandler sets the operation handler for the forum get one operation
	ForumForumGetOneHandler forum.ForumGetOneHandler
	// ThreadForumGetThreadsHandler sets the operation handler for the forum get threads operation
	ThreadForumGetThreadsHandler thread.ForumGetThreadsHandler
	// ForumForumGetUsersHandler sets the operation handler for the forum get users operation
	ForumForumGetUsersHandler forum.ForumGetUsersHandler
	// PostPostGetOneHandler sets the operation handler for the post get one operation
	PostPostGetOneHandler post.PostGetOneHandler
	// PostPostUpdateHandler sets the operation handler for the post update operation
	PostPostUpdateHandler post.PostUpdateHandler
	// PostPostsCreateHandler sets the operation handler for the posts create operation
	PostPostsCreateHandler post.PostsCreateHandler
	// ServiceStatusHandler sets the operation handler for the status operation
	ServiceStatusHandler service.StatusHandler
	// ThreadThreadCreateHandler sets the operation handler for the thread create operation
	ThreadThreadCreateHandler thread.ThreadCreateHandler
	// ThreadThreadGetOneHandler sets the operation handler for the thread get one operation
	ThreadThreadGetOneHandler thread.ThreadGetOneHandler
	// PostThreadGetPostsHandler sets the operation handler for the thread get posts operation
	PostThreadGetPostsHandler post.ThreadGetPostsHandler
	// ThreadThreadUpdateHandler sets the operation handler for the thread update operation
	ThreadThreadUpdateHandler thread.ThreadUpdateHandler
	// ThreadThreadVoteHandler sets the operation handler for the thread vote operation
	ThreadThreadVoteHandler thread.ThreadVoteHandler
	// UserUserCreateHandler sets the operation handler for the user create operation
	UserUserCreateHandler user.UserCreateHandler
	// UserUserGetOneHandler sets the operation handler for the user get one operation
	UserUserGetOneHandler user.UserGetOneHandler
	// UserUserUpdateHandler sets the operation handler for the user update operation
	UserUserUpdateHandler user.UserUpdateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ForumAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ForumAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ForumAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ForumAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ForumAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ForumAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ForumAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ForumAPI
func (o *ForumAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ServiceClearHandler == nil {
		unregistered = append(unregistered, "service.ClearHandler")
	}

	if o.ForumForumCreateHandler == nil {
		unregistered = append(unregistered, "forum.ForumCreateHandler")
	}

	if o.ForumForumGetOneHandler == nil {
		unregistered = append(unregistered, "forum.ForumGetOneHandler")
	}

	if o.ThreadForumGetThreadsHandler == nil {
		unregistered = append(unregistered, "thread.ForumGetThreadsHandler")
	}

	if o.ForumForumGetUsersHandler == nil {
		unregistered = append(unregistered, "forum.ForumGetUsersHandler")
	}

	if o.PostPostGetOneHandler == nil {
		unregistered = append(unregistered, "post.PostGetOneHandler")
	}

	if o.PostPostUpdateHandler == nil {
		unregistered = append(unregistered, "post.PostUpdateHandler")
	}

	if o.PostPostsCreateHandler == nil {
		unregistered = append(unregistered, "post.PostsCreateHandler")
	}

	if o.ServiceStatusHandler == nil {
		unregistered = append(unregistered, "service.StatusHandler")
	}

	if o.ThreadThreadCreateHandler == nil {
		unregistered = append(unregistered, "thread.ThreadCreateHandler")
	}

	if o.ThreadThreadGetOneHandler == nil {
		unregistered = append(unregistered, "thread.ThreadGetOneHandler")
	}

	if o.PostThreadGetPostsHandler == nil {
		unregistered = append(unregistered, "post.ThreadGetPostsHandler")
	}

	if o.ThreadThreadUpdateHandler == nil {
		unregistered = append(unregistered, "thread.ThreadUpdateHandler")
	}

	if o.ThreadThreadVoteHandler == nil {
		unregistered = append(unregistered, "thread.ThreadVoteHandler")
	}

	if o.UserUserCreateHandler == nil {
		unregistered = append(unregistered, "user.UserCreateHandler")
	}

	if o.UserUserGetOneHandler == nil {
		unregistered = append(unregistered, "user.UserGetOneHandler")
	}

	if o.UserUserUpdateHandler == nil {
		unregistered = append(unregistered, "user.UserUpdateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ForumAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ForumAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ForumAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *ForumAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ForumAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ForumAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the forum API
func (o *ForumAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ForumAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service/clear"] = service.NewClear(o.context, o.ServiceClearHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forum/create"] = forum.NewForumCreate(o.context, o.ForumForumCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forum/{slug}/details"] = forum.NewForumGetOne(o.context, o.ForumForumGetOneHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forum/{slug}/threads"] = thread.NewForumGetThreads(o.context, o.ThreadForumGetThreadsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forum/{slug}/users"] = forum.NewForumGetUsers(o.context, o.ForumForumGetUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/post/{id}/details"] = post.NewPostGetOne(o.context, o.PostPostGetOneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/post/{id}/details"] = post.NewPostUpdate(o.context, o.PostPostUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/thread/{slug_or_id}/create"] = post.NewPostsCreate(o.context, o.PostPostsCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service/status"] = service.NewStatus(o.context, o.ServiceStatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forum/{slug}/create"] = thread.NewThreadCreate(o.context, o.ThreadThreadCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/thread/{slug_or_id}/details"] = thread.NewThreadGetOne(o.context, o.ThreadThreadGetOneHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/thread/{slug_or_id}/posts"] = post.NewThreadGetPosts(o.context, o.PostThreadGetPostsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/thread/{slug_or_id}/details"] = thread.NewThreadUpdate(o.context, o.ThreadThreadUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/thread/{slug_or_id}/vote"] = thread.NewThreadVote(o.context, o.ThreadThreadVoteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{nickname}/create"] = user.NewUserCreate(o.context, o.UserUserCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{nickname}/profile"] = user.NewUserGetOne(o.context, o.UserUserGetOneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{nickname}/profile"] = user.NewUserUpdate(o.context, o.UserUserUpdateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ForumAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ForumAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ForumAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ForumAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
